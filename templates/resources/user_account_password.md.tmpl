---
# Copyright (c) 2023-2024 Dell Inc., or its subsidiaries. All Rights Reserved.
#
# Licensed under the Mozilla Public License Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://mozilla.org/MPL/2.0/
#
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

title: "{{.Name }} {{.Type | lower}}"
linkTitle: "{{.Name }}"
page_title: "{{.Name}} {{.Type}} - {{.ProviderName}}"
subcategory: ""
description: |-
{{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---

# {{.Name }} ({{.Type}})

{{ .Description | trimspace }}

~> **Note:** This resource can be used by users with 'Administrator' role/privilege. For users with non-administrator role/privilege, either 'user resource' or 'user module' can be used for updating the password.

~> **Note:** Please refer to iDRAC password policy before updating the password.

~> **Note:** For managing (Create/Update/Delete/Change password) a single user at a time, use the resource 'redfish_user_account'

~> **Note:** For managing (Create/Update/Delete/Change password) multiple users at a time, use the module 'user_module'

~> **Note:** For changing the password of Administrator/root user alone, use the resource 'user_account_password'

{{ if .HasExample -}}
## Example Usage


provider.tf
{{ tffile ( printf "examples/resources/%s/provider.tf" .Name ) }}

main.tf
{{tffile .ExampleFile }}

After successful execution of the above resource block, the password of the 'root'/'admin' user will be updated to new password.

{{- end }}

{{ .SchemaMarkdown | trimspace }}

{{ if .HasImport -}}
## Import

Import is supported using the following syntax:

{{codefile "shell" .ImportFile }}

1. This will import the user instance with specified ID into your Terraform state.
2. After successful import, you can run terraform state list to ensure the resource has been imported successfully.
3. Now, you can fill in the resource block with the appropriate arguments and settings that match the imported resource's real-world configuration.
4. Execute terraform plan to see if your configuration and the imported resource are in sync. Make adjustments if needed.
5. Finally, execute terraform apply to bring the resource fully under Terraform's management.
6. Now, the resource which was not part of terraform became part of Terraform managed infrastructure.

{{- end }}
